// <copyright file="ProtocolExtensionGenerator.cs" company="Skyline Communications">
// Copyright (c) PlaceholderCompany. All rights reserved.
// </copyright>

namespace ProtocolExtension
{
    using System.Collections.Generic;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;

    /// <summary>
    /// Creating ProtocolExtensionGenerator class.
    /// </summary>
    public class ProtocolExtensionGenerator
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProtocolExtensionGenerator"/> class.
        /// </summary>
        protected ProtocolExtensionGenerator()
        {
        }

        /// <summary>
        /// Generating DeleteRowMethod for object.
        /// </summary>
        /// <returns>MethodDeclarationSyntax.</returns>
        public static MethodDeclarationSyntax GenerateDeleteRowMethodObject()
        {
            var ifStatement1 = SyntaxFactory.IfStatement(
    SyntaxFactory.BinaryExpression(
        SyntaxKind.EqualsExpression,
        SyntaxFactory.IdentifierName("keysToDelete"),
        SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression)),
    SyntaxFactory.ThrowStatement(
        SyntaxFactory.ObjectCreationExpression(
            SyntaxFactory.IdentifierName("ArgumentNullException"))
        .WithArgumentList(
            SyntaxFactory.ArgumentList(
                SyntaxFactory.SingletonSeparatedList(
                    SyntaxFactory.Argument(
                        SyntaxFactory.InvocationExpression(
                            SyntaxFactory.IdentifierName("nameof"))
                        .WithArgumentList(
                            SyntaxFactory.ArgumentList(
                                SyntaxFactory.SingletonSeparatedList(
                                    SyntaxFactory.Argument(
                                        SyntaxFactory.IdentifierName("keysToDelete")))))))))))
                .WithLeadingTrivia(SyntaxFactory.Comment("// Sanity checks"));
            var localDeclaration1 = SyntaxFactory.LocalDeclarationStatement(
    SyntaxFactory.VariableDeclaration(
        SyntaxFactory.IdentifierName("var"))
    .WithVariables(
        SyntaxFactory.SingletonSeparatedList(
            SyntaxFactory.VariableDeclarator("keysToDeleteArray")
            .WithInitializer(
                SyntaxFactory.EqualsValueClause(
                    SyntaxFactory.InvocationExpression(
                        SyntaxFactory.MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression,
                            SyntaxFactory.IdentifierName("keysToDelete"),
                            SyntaxFactory.IdentifierName("ToArray"))))))));

            var ifStatement2 = SyntaxFactory.IfStatement(
                SyntaxFactory.BinaryExpression(
                    SyntaxKind.EqualsExpression,
                    SyntaxFactory.MemberAccessExpression(
                        SyntaxKind.SimpleMemberAccessExpression,
                        SyntaxFactory.IdentifierName("keysToDeleteArray"),
                        SyntaxFactory.IdentifierName("Length")),
                    SyntaxFactory.LiteralExpression(
                        SyntaxKind.NumericLiteralExpression,
                        SyntaxFactory.Literal(0))),
                SyntaxFactory.Block(
                    SyntaxFactory.SingletonList<StatementSyntax>(
                        SyntaxFactory.ReturnStatement()
                        .WithLeadingTrivia(
                            SyntaxFactory.Comment("// No rows to delete")))));

            var localDeclaration2 = SyntaxFactory.LocalDeclarationStatement(
                SyntaxFactory.VariableDeclaration(
                    SyntaxFactory.ArrayType(
                        SyntaxFactory.PredefinedType(
                            SyntaxFactory.Token(SyntaxKind.StringKeyword)))
                    .WithRankSpecifiers(
                        SyntaxFactory.SingletonList(
                            SyntaxFactory.ArrayRankSpecifier(
                                SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                    SyntaxFactory.OmittedArraySizeExpression())))))
                .WithVariables(
                    SyntaxFactory.SingletonSeparatedList(
                        SyntaxFactory.VariableDeclarator("deleteRowKeys")
                        .WithInitializer(
                            SyntaxFactory.EqualsValueClause(
                                SyntaxFactory.ArrayCreationExpression(
                                    SyntaxFactory.ArrayType(
                                        SyntaxFactory.PredefinedType(
                                            SyntaxFactory.Token(SyntaxKind.StringKeyword)))
                                    .WithRankSpecifiers(
                                        SyntaxFactory.SingletonList(
                                            SyntaxFactory.ArrayRankSpecifier(
                                                SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                    SyntaxFactory.MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        SyntaxFactory.IdentifierName("keysToDeleteArray"),
                                                        SyntaxFactory.IdentifierName("Length"))))))))))));

            var forStatement = SyntaxFactory.ForStatement(
    SyntaxFactory.Block(
        SyntaxFactory.SingletonList<StatementSyntax>(
            SyntaxFactory.ExpressionStatement(
                SyntaxFactory.AssignmentExpression(
                    SyntaxKind.SimpleAssignmentExpression,
                    SyntaxFactory.ElementAccessExpression(
                        SyntaxFactory.IdentifierName("deleteRowKeys"))
                    .WithArgumentList(
                        SyntaxFactory.BracketedArgumentList(
                            SyntaxFactory.SingletonSeparatedList(
                                SyntaxFactory.Argument(
                                    SyntaxFactory.IdentifierName("i"))))),
                    SyntaxFactory.CastExpression(
                        SyntaxFactory.PredefinedType(
                            SyntaxFactory.Token(SyntaxKind.StringKeyword)),
                        SyntaxFactory.ElementAccessExpression(
                            SyntaxFactory.IdentifierName("keysToDeleteArray"))
                        .WithArgumentList(
                            SyntaxFactory.BracketedArgumentList(
                                SyntaxFactory.SingletonSeparatedList(
                                    SyntaxFactory.Argument(
                                        SyntaxFactory.IdentifierName("i")))))))))))
    .WithDeclaration(
        SyntaxFactory.VariableDeclaration(
            SyntaxFactory.PredefinedType(
                SyntaxFactory.Token(SyntaxKind.IntKeyword)))
        .WithVariables(
            SyntaxFactory.SingletonSeparatedList(
                SyntaxFactory.VariableDeclarator("i")
                .WithInitializer(
                    SyntaxFactory.EqualsValueClause(
                        SyntaxFactory.LiteralExpression(
                            SyntaxKind.NumericLiteralExpression,
                            SyntaxFactory.Literal(0)))))))
    .WithCondition(
        SyntaxFactory.BinaryExpression(
            SyntaxKind.LessThanExpression,
            SyntaxFactory.IdentifierName("i"),
            SyntaxFactory.MemberAccessExpression(
                SyntaxKind.SimpleMemberAccessExpression,
                SyntaxFactory.IdentifierName("deleteRowKeys"),
                SyntaxFactory.IdentifierName("Length"))))
    .WithIncrementors(
        SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
            SyntaxFactory.PostfixUnaryExpression(
                SyntaxKind.PostIncrementExpression,
                SyntaxFactory.IdentifierName("i"))));

            var expressionStatement = SyntaxFactory.ExpressionStatement(
                SyntaxFactory.InvocationExpression(
                    SyntaxFactory.MemberAccessExpression(
                        SyntaxKind.SimpleMemberAccessExpression,
                        SyntaxFactory.IdentifierName("protocol"),
                        SyntaxFactory.IdentifierName("NotifyProtocol")))
                .WithArgumentList(
                    SyntaxFactory.ArgumentList(
                        SyntaxFactory.SeparatedList<ArgumentSyntax>(
                            new SyntaxNodeOrToken[]
                            {
                    SyntaxFactory.Argument(
                        SyntaxFactory.LiteralExpression(
                            SyntaxKind.NumericLiteralExpression,
                            SyntaxFactory.Literal(156))),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Argument(
                        SyntaxFactory.IdentifierName("tablePid")),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Argument(
                        SyntaxFactory.IdentifierName("deleteRowKeys")),
                            }))));

            var methodBody = SyntaxFactory.Block(
                ifStatement1,
                localDeclaration1,
                ifStatement2,
                localDeclaration2,
                forStatement,
                expressionStatement);

            var methodDeclaration = SyntaxFactory.MethodDeclaration(
         SyntaxFactory.PredefinedType(
             SyntaxFactory.Token(SyntaxKind.VoidKeyword)),
         SyntaxFactory.Identifier("DeleteRow"))
     .WithModifiers(
         SyntaxFactory.TokenList(
             SyntaxFactory.Token(SyntaxKind.PublicKeyword),
             SyntaxFactory.Token(SyntaxKind.StaticKeyword)))
     .WithParameterList(
         SyntaxFactory.ParameterList(
             SyntaxFactory.SeparatedList<ParameterSyntax>(
                 new SyntaxNodeOrToken[]
                 {
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("protocol"))
                    .WithModifiers(
                        SyntaxFactory.TokenList(
                            SyntaxFactory.Token(SyntaxKind.ThisKeyword)))
                    .WithType(
                        SyntaxFactory.IdentifierName("SLProtocol")),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("tablePid"))
                    .WithType(
                        SyntaxFactory.PredefinedType(
                            SyntaxFactory.Token(SyntaxKind.IntKeyword))),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("keysToDelete"))
                    .WithType(
                        SyntaxFactory.GenericName(
                            SyntaxFactory.Identifier("IEnumerable"))
                        .WithTypeArgumentList(
                            SyntaxFactory.TypeArgumentList(
                                SyntaxFactory.SingletonSeparatedList<TypeSyntax>(
                                    SyntaxFactory.PredefinedType(
                                        SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))))),
                 })))
     .WithBody(methodBody);

            return methodDeclaration;
        }

        /// <summary>
        /// Generating DeleteRowMethod for string.
        /// </summary>
        /// <returns>MethodDeclarationSyntax.</returns>
        public static MethodDeclarationSyntax GenerateDeleteRowMethodString()
        {
            var returnType = SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.VoidKeyword));
            var methodName = SyntaxFactory.Identifier("DeleteRow");

            var modifiers = SyntaxFactory.TokenList(
                SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                SyntaxFactory.Token(SyntaxKind.StaticKeyword));

            var parameters = SyntaxFactory.ParameterList(
    SyntaxFactory.SeparatedList<ParameterSyntax>(new[]
    {
        SyntaxFactory.Parameter(SyntaxFactory.Identifier("protocol"))
            .WithModifiers(SyntaxFactory.TokenList(SyntaxFactory.Token(SyntaxKind.ThisKeyword)))
            .WithType(SyntaxFactory.IdentifierName("SLProtocol")),

        SyntaxFactory.Parameter(SyntaxFactory.Identifier("tablePid"))
            .WithType(SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.IntKeyword))),

        SyntaxFactory.Parameter(SyntaxFactory.Identifier("keysToDelete"))
            .WithType(
                SyntaxFactory.GenericName(SyntaxFactory.Identifier("IEnumerable"))
                .WithTypeArgumentList(SyntaxFactory.TypeArgumentList(
                    SyntaxFactory.SingletonSeparatedList<TypeSyntax>(
                        SyntaxFactory.PredefinedType(SyntaxFactory.Token(SyntaxKind.StringKeyword)))))),
    }));

            var body = SyntaxFactory.Block(
             SyntaxFactory.List<StatementSyntax>(new StatementSyntax[]
             {
                SyntaxFactory.IfStatement(
                    SyntaxFactory.BinaryExpression(
                        SyntaxKind.EqualsExpression,
                        SyntaxFactory.IdentifierName("keysToDelete"),
                        SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression)),
                    SyntaxFactory.ThrowStatement(
                        SyntaxFactory.ObjectCreationExpression(SyntaxFactory.IdentifierName("ArgumentNullException"))
                            .WithArgumentList(SyntaxFactory.ArgumentList(SyntaxFactory.SingletonSeparatedList(
                                SyntaxFactory.Argument(
                                    SyntaxFactory.InvocationExpression(SyntaxFactory.IdentifierName("nameof"))
                                        .WithArgumentList(SyntaxFactory.ArgumentList(SyntaxFactory.SingletonSeparatedList(
                                            SyntaxFactory.Argument(SyntaxFactory.IdentifierName("keysToDelete"))))))))))),
                SyntaxFactory.LocalDeclarationStatement(
                    SyntaxFactory.VariableDeclaration(SyntaxFactory.IdentifierName("var"))
                        .WithVariables(SyntaxFactory.SingletonSeparatedList(
                            SyntaxFactory.VariableDeclarator(SyntaxFactory.Identifier("deleteRowKeys"))
                                .WithInitializer(
                                    SyntaxFactory.EqualsValueClause(
                                        SyntaxFactory.InvocationExpression(
                                            SyntaxFactory.MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                SyntaxFactory.IdentifierName("keysToDelete"),
                                                SyntaxFactory.IdentifierName("ToArray")))))))),
                SyntaxFactory.IfStatement(
                    SyntaxFactory.BinaryExpression(
                        SyntaxKind.EqualsExpression,
                        SyntaxFactory.MemberAccessExpression(
                            SyntaxKind.SimpleMemberAccessExpression,
                            SyntaxFactory.IdentifierName("deleteRowKeys"),
                            SyntaxFactory.IdentifierName("Length")),
                        SyntaxFactory.LiteralExpression(SyntaxKind.NumericLiteralExpression, SyntaxFactory.Literal(0))),
                    SyntaxFactory.Block(SyntaxFactory.SingletonList<StatementSyntax>(
                        SyntaxFactory.ReturnStatement()
                            .WithReturnKeyword(SyntaxFactory.Token(SyntaxKind.ReturnKeyword))
                            .WithLeadingTrivia(SyntaxFactory.TriviaList(SyntaxFactory.Comment("// No rows to delete")))))),
                SyntaxFactory.ExpressionStatement(
                     SyntaxFactory.InvocationExpression(
                         SyntaxFactory.MemberAccessExpression(
                             SyntaxKind.SimpleMemberAccessExpression,
                             SyntaxFactory.IdentifierName("protocol"),
                             SyntaxFactory.IdentifierName("NotifyProtocol")))
                         .WithArgumentList(
                             SyntaxFactory.ArgumentList(SyntaxFactory.SeparatedList<ArgumentSyntax>(new[]
                             {
                                SyntaxFactory.Argument(SyntaxFactory.LiteralExpression(
                                    SyntaxKind.NumericLiteralExpression, SyntaxFactory.Literal(156))),
                                SyntaxFactory.Argument(SyntaxFactory.IdentifierName("tablePid")),
                                SyntaxFactory.Argument(SyntaxFactory.IdentifierName("deleteRowKeys")),
                             })))),
             }));

            var methodDeclaration = SyntaxFactory.MethodDeclaration(returnType, methodName)
                .WithModifiers(modifiers)
                .WithParameterList(parameters)
                .WithBody(body);

            return methodDeclaration;
        }

        /// <summary>
        /// Generating GetCell method.
        /// </summary>
        /// <returns>MethodDeclarationSyntax.</returns>
        public static MethodDeclarationSyntax GenerateGetCellMethod()
        {
            return SyntaxFactory.MethodDeclaration(
      SyntaxFactory.PredefinedType(
          SyntaxFactory.Token(SyntaxKind.ObjectKeyword)),
      SyntaxFactory.Identifier("GetCell"))
  .WithModifiers(
      SyntaxFactory.TokenList(
          SyntaxFactory.Token(SyntaxKind.PublicKeyword),
          SyntaxFactory.Token(SyntaxKind.StaticKeyword)))
  .WithParameterList(
      SyntaxFactory.ParameterList(
          SyntaxFactory.SeparatedList<ParameterSyntax>(
              new SyntaxNodeOrToken[]
              {
                SyntaxFactory.Parameter(
                    SyntaxFactory.Identifier("protocol"))
                .WithModifiers(
                    SyntaxFactory.TokenList(
                        SyntaxFactory.Token(SyntaxKind.ThisKeyword)))
                .WithType(
                    SyntaxFactory.IdentifierName("SLProtocol")),
                SyntaxFactory.Token(SyntaxKind.CommaToken),
                SyntaxFactory.Parameter(
                    SyntaxFactory.Identifier("tablePid"))
                .WithType(
                    SyntaxFactory.PredefinedType(
                        SyntaxFactory.Token(SyntaxKind.IntKeyword))),
                SyntaxFactory.Token(SyntaxKind.CommaToken),
                SyntaxFactory.Parameter(
                    SyntaxFactory.Identifier("rowPK"))
                .WithType(
                    SyntaxFactory.PredefinedType(
                        SyntaxFactory.Token(SyntaxKind.StringKeyword))),
                SyntaxFactory.Token(SyntaxKind.CommaToken),
                SyntaxFactory.Parameter(
                    SyntaxFactory.Identifier("columnIdx"))
                .WithType(
                    SyntaxFactory.PredefinedType(
                        SyntaxFactory.Token(SyntaxKind.IntKeyword))),
              })))
  .WithBody(
      SyntaxFactory.Block(
          SyntaxFactory.IfStatement(
              SyntaxFactory.BinaryExpression(
                  SyntaxKind.EqualsExpression,
                  SyntaxFactory.IdentifierName("rowPK"),
                  SyntaxFactory.LiteralExpression(
                      SyntaxKind.NullLiteralExpression)),
              SyntaxFactory.ThrowStatement(
                  SyntaxFactory.ObjectCreationExpression(
                      SyntaxFactory.IdentifierName("ArgumentNullException"))
                  .WithArgumentList(
                      SyntaxFactory.ArgumentList(
                          SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                              SyntaxFactory.Argument(
                                  SyntaxFactory.InvocationExpression(
                                      SyntaxFactory.IdentifierName("nameof"))
                                  .WithArgumentList(
                                      SyntaxFactory.ArgumentList(
                                          SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                              SyntaxFactory.Argument(
                                                  SyntaxFactory.IdentifierName("rowPK"))))))))))),
          SyntaxFactory.ReturnStatement(
              SyntaxFactory.InvocationExpression(
                  SyntaxFactory.MemberAccessExpression(
                      SyntaxKind.SimpleMemberAccessExpression,
                      SyntaxFactory.IdentifierName("protocol"),
                      SyntaxFactory.IdentifierName("NotifyProtocol")))
              .WithArgumentList(
                  SyntaxFactory.ArgumentList(
                      SyntaxFactory.SeparatedList<ArgumentSyntax>(
                          new SyntaxNodeOrToken[]
                          {
                            SyntaxFactory.Argument(
                                SyntaxFactory.LiteralExpression(
                                    SyntaxKind.NumericLiteralExpression,
                                    SyntaxFactory.Literal(122))),
                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                            SyntaxFactory.Argument(
                                SyntaxFactory.ArrayCreationExpression(
                                    SyntaxFactory.ArrayType(
                                        SyntaxFactory.PredefinedType(
                                            SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                                    .WithRankSpecifiers(
                                        SyntaxFactory.SingletonList(
                                            SyntaxFactory.ArrayRankSpecifier())))
                                .WithInitializer(
                                    SyntaxFactory.InitializerExpression(
                                        SyntaxKind.ArrayInitializerExpression,
                                        SyntaxFactory.SeparatedList<ExpressionSyntax>(
                                            new SyntaxNodeOrToken[]
                                            {
                                                SyntaxFactory.IdentifierName("tablePid"),
                                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                SyntaxFactory.IdentifierName("rowPK"),
                                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                SyntaxFactory.BinaryExpression(
                                                    SyntaxKind.AddExpression,
                                                    SyntaxFactory.IdentifierName("columnIdx"),
                                                    SyntaxFactory.LiteralExpression(
                                                        SyntaxKind.NumericLiteralExpression,
                                                        SyntaxFactory.Literal(1))),
                                            })))),
                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                            SyntaxFactory.Argument(
                                SyntaxFactory.LiteralExpression(
                                    SyntaxKind.NullLiteralExpression)),
                          }))))));
        }

        /// <summary>
        /// Generating GetCell method.
        /// </summary>
        /// <returns>MethodDeclarationSyntax.</returns>
        public static MethodDeclarationSyntax GenerateGetColumnMethod()
        {
            return SyntaxFactory.MethodDeclaration(
            SyntaxFactory.ArrayType(
                SyntaxFactory.PredefinedType(
                    SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
            .WithRankSpecifiers(
                SyntaxFactory.SingletonList(
                    SyntaxFactory.ArrayRankSpecifier(
                        SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                            SyntaxFactory.OmittedArraySizeExpression())))),
            SyntaxFactory.Identifier("GetColumn"))
        .WithModifiers(
            SyntaxFactory.TokenList(
                SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                SyntaxFactory.Token(SyntaxKind.StaticKeyword)))
        .WithParameterList(
            SyntaxFactory.ParameterList(
                SyntaxFactory.SeparatedList<ParameterSyntax>(
                    new SyntaxNodeOrToken[]
                    {
                        SyntaxFactory.Parameter(
                            SyntaxFactory.Identifier("protocol"))
                        .WithModifiers(
                            SyntaxFactory.TokenList(
                                SyntaxFactory.Token(SyntaxKind.ThisKeyword)))
                        .WithType(
                            SyntaxFactory.IdentifierName("SLProtocol")),
                        SyntaxFactory.Token(SyntaxKind.CommaToken),
                        SyntaxFactory.Parameter(
                            SyntaxFactory.Identifier("tablePid"))
                        .WithType(
                            SyntaxFactory.PredefinedType(
                                SyntaxFactory.Token(SyntaxKind.IntKeyword))),
                        SyntaxFactory.Token(SyntaxKind.CommaToken),
                        SyntaxFactory.Parameter(
                            SyntaxFactory.Identifier("columnIdx"))
                        .WithType(
                            SyntaxFactory.PredefinedType(
                                SyntaxFactory.Token(SyntaxKind.UIntKeyword))),
                    })))
        .WithBody(
            SyntaxFactory.Block(
                SyntaxFactory.LocalDeclarationStatement(
                    SyntaxFactory.VariableDeclaration(
                        SyntaxFactory.IdentifierName(
                            SyntaxFactory.Identifier(
                                SyntaxFactory.TriviaList(),
                                SyntaxKind.VarKeyword,
                                "var",
                                "var",
                                SyntaxFactory.TriviaList())))
                        .WithVariables(
                            SyntaxFactory.SingletonSeparatedList(
                                SyntaxFactory.VariableDeclarator(
                                    SyntaxFactory.Identifier("columns"))
                                .WithInitializer(
                                    SyntaxFactory.EqualsValueClause(
                                        SyntaxFactory.InvocationExpression(
                                            SyntaxFactory.MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                SyntaxFactory.IdentifierName("protocol"),
                                                SyntaxFactory.IdentifierName("GetColumns")))
                                            .WithArgumentList(
                                                SyntaxFactory.ArgumentList(
                                                    SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                                        new SyntaxNodeOrToken[]
                                                        {
                                                            SyntaxFactory.Argument(
                                                                SyntaxFactory.IdentifierName("tablePid")),
                                                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                            SyntaxFactory.Argument(
                                                                SyntaxFactory.ArrayCreationExpression(
                                                                    SyntaxFactory.ArrayType(
                                                                        SyntaxFactory.PredefinedType(
                                                                            SyntaxFactory.Token(SyntaxKind.UIntKeyword)))
                                                                        .WithRankSpecifiers(
                                                                            SyntaxFactory.SingletonList(
                                                                                SyntaxFactory.ArrayRankSpecifier(
                                                                                    SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                                                        SyntaxFactory.OmittedArraySizeExpression())))))
                                                                    .WithInitializer(
                                                                        SyntaxFactory.InitializerExpression(
                                                                            SyntaxKind.ArrayInitializerExpression,
                                                                            SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                                                SyntaxFactory.IdentifierName("columnIdx"))))),
                                                        })))))))),
                SyntaxFactory.ReturnStatement(
                    SyntaxFactory.CastExpression(
                        SyntaxFactory.ArrayType(
                            SyntaxFactory.PredefinedType(
                                SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                        .WithRankSpecifiers(
                            SyntaxFactory.SingletonList(
                                SyntaxFactory.ArrayRankSpecifier(
                                    SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                        SyntaxFactory.OmittedArraySizeExpression())))),
                        SyntaxFactory.ElementAccessExpression(
                            SyntaxFactory.IdentifierName("columns"))
                        .WithArgumentList(
                            SyntaxFactory.BracketedArgumentList(
                                SyntaxFactory.SingletonSeparatedList(
                                    SyntaxFactory.Argument(
                                        SyntaxFactory.LiteralExpression(
                                            SyntaxKind.NumericLiteralExpression,
                                            SyntaxFactory.Literal(0))))))))));
        }

        /// <summary>
        /// Generating GetCell method.
        /// </summary>
        /// <returns>MethodDeclarationSyntax.</returns>
        public static MethodDeclarationSyntax GenerateGetColumnsMethod()
        {
            return SyntaxFactory.MethodDeclaration(
     SyntaxFactory.ArrayType(
         SyntaxFactory.PredefinedType(
             SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
     .WithRankSpecifiers(
         SyntaxFactory.SingletonList(
             SyntaxFactory.ArrayRankSpecifier(
                 SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                     SyntaxFactory.OmittedArraySizeExpression())))),
     SyntaxFactory.Identifier("GetColumns"))
 .WithModifiers(
     SyntaxFactory.TokenList(
         SyntaxFactory.Token(SyntaxKind.PublicKeyword),
         SyntaxFactory.Token(SyntaxKind.StaticKeyword)))
 .WithParameterList(
     SyntaxFactory.ParameterList(
         SyntaxFactory.SeparatedList<ParameterSyntax>(
             new[]
             {
               SyntaxFactory.Parameter(
                   SyntaxFactory.Identifier("protocol"))
               .WithModifiers(
                   SyntaxFactory.TokenList(
                       SyntaxFactory.Token(SyntaxKind.ThisKeyword)))
               .WithType(
                   SyntaxFactory.IdentifierName("SLProtocol")),

               SyntaxFactory.Parameter(
                   SyntaxFactory.Identifier("tablePid"))
               .WithType(
                   SyntaxFactory.PredefinedType(
                       SyntaxFactory.Token(SyntaxKind.IntKeyword))),

               SyntaxFactory.Parameter(
                   SyntaxFactory.Identifier("columnsIdx"))
               .WithType(
                   SyntaxFactory.GenericName(
                       SyntaxFactory.Identifier("IEnumerable"))
                   .WithTypeArgumentList(
                       SyntaxFactory.TypeArgumentList(
                           SyntaxFactory.SingletonSeparatedList<TypeSyntax>(
                               SyntaxFactory.PredefinedType(
                                   SyntaxFactory.Token(SyntaxKind.UIntKeyword)))))),
             })))
 .WithBody(
     SyntaxFactory.Block(
         SyntaxFactory.List(new StatementSyntax[]
         {
           SyntaxFactory.IfStatement(
               SyntaxFactory.BinaryExpression(
                   SyntaxKind.EqualsExpression,
                   SyntaxFactory.IdentifierName("columnsIdx"),
                   SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression)),
               SyntaxFactory.ThrowStatement(
                   SyntaxFactory.ObjectCreationExpression(
                       SyntaxFactory.IdentifierName("ArgumentNullException"))
                   .WithArgumentList(
                       SyntaxFactory.ArgumentList(
                           SyntaxFactory.SingletonSeparatedList(
                               SyntaxFactory.Argument(
                                   SyntaxFactory.InvocationExpression(
                                       SyntaxFactory.IdentifierName("nameof"))
                                   .WithArgumentList(
                                       SyntaxFactory.ArgumentList(
                                           SyntaxFactory.SingletonSeparatedList(
                                               SyntaxFactory.Argument(
                                                   SyntaxFactory.IdentifierName("columnsIdx"))))))))))),

           SyntaxFactory.LocalDeclarationStatement(
               SyntaxFactory.VariableDeclaration(
                   SyntaxFactory.IdentifierName("var"))
               .WithVariables(
                   SyntaxFactory.SingletonSeparatedList(
                       SyntaxFactory.VariableDeclarator(
                           SyntaxFactory.Identifier("columnsIdxArray"))
                       .WithInitializer(
                           SyntaxFactory.EqualsValueClause(
                               SyntaxFactory.InvocationExpression(
                                   SyntaxFactory.MemberAccessExpression(
                                       SyntaxKind.SimpleMemberAccessExpression,
                                       SyntaxFactory.IdentifierName("columnsIdx"),
                                       SyntaxFactory.IdentifierName("ToArray")))))))),

           SyntaxFactory.IfStatement(
               SyntaxFactory.BinaryExpression(
                   SyntaxKind.EqualsExpression,
                   SyntaxFactory.MemberAccessExpression(
                       SyntaxKind.SimpleMemberAccessExpression,
                       SyntaxFactory.IdentifierName("columnsIdxArray"),
                       SyntaxFactory.IdentifierName("Length")),
                   SyntaxFactory.LiteralExpression(
                       SyntaxKind.NumericLiteralExpression,
                       SyntaxFactory.Literal(0))),
               SyntaxFactory.Block(
                   SyntaxFactory.SingletonList<StatementSyntax>(
                       SyntaxFactory.ReturnStatement(
                           SyntaxFactory.ArrayCreationExpression(
                               SyntaxFactory.ArrayType(
                                   SyntaxFactory.PredefinedType(
                                       SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                               .WithRankSpecifiers(
                                   SyntaxFactory.SingletonList(
                                       SyntaxFactory.ArrayRankSpecifier(
                                           SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                               SyntaxFactory.OmittedArraySizeExpression())))))
                           .WithInitializer(
                               SyntaxFactory.InitializerExpression(
                                   SyntaxKind.ArrayInitializerExpression)))))),
           SyntaxFactory.ReturnStatement(
               SyntaxFactory.CastExpression(
                   SyntaxFactory.ArrayType(
                       SyntaxFactory.PredefinedType(
                           SyntaxFactory.Token(
                               SyntaxKind.ObjectKeyword)))
                   .WithRankSpecifiers(
                       SyntaxFactory.SingletonList(
                           SyntaxFactory.ArrayRankSpecifier(
                               SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                   SyntaxFactory.OmittedArraySizeExpression())))),
                   SyntaxFactory.InvocationExpression(
                       SyntaxFactory.MemberAccessExpression(
                           SyntaxKind.SimpleMemberAccessExpression,
                           SyntaxFactory.IdentifierName("protocol"),
                           SyntaxFactory.IdentifierName("NotifyProtocol")))
                   .WithArgumentList(
                       SyntaxFactory.ArgumentList(
                           SyntaxFactory.SeparatedList<ArgumentSyntax>(
                               new SyntaxNodeOrToken[]
                               {
                                   SyntaxFactory.Argument(
                                       SyntaxFactory.LiteralExpression(
                                           SyntaxKind.NumericLiteralExpression,
                                           SyntaxFactory.Literal(321))),
                                   SyntaxFactory.Token(SyntaxKind.CommaToken),
                                   SyntaxFactory.Argument(
                                       SyntaxFactory.IdentifierName("tablePid")),
                                   SyntaxFactory.Token(SyntaxKind.CommaToken),
                                   SyntaxFactory.Argument(
                                       SyntaxFactory.IdentifierName("columnsIdxArray")),
                               }))))),
         })));
        }

        /// <summary>
        /// Generating SetCell method.
        /// </summary>
        /// <returns>MethodDeclarationSyntax.</returns>
        public static MethodDeclarationSyntax GenerateSetCellMethod()
        {
            return SyntaxFactory.MethodDeclaration(
        SyntaxFactory.PredefinedType(
            SyntaxFactory.Token(SyntaxKind.BoolKeyword)),
        SyntaxFactory.Identifier("SetCell"))
    .WithModifiers(
        SyntaxFactory.TokenList(
            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
            SyntaxFactory.Token(SyntaxKind.StaticKeyword)))
    .WithParameterList(
        SyntaxFactory.ParameterList(
            SyntaxFactory.SeparatedList<ParameterSyntax>(
                new SyntaxNodeOrToken[]
                {
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("protocol"))
                    .WithModifiers(
                        SyntaxFactory.TokenList(
                            SyntaxFactory.Token(SyntaxKind.ThisKeyword)))
                    .WithType(
                        SyntaxFactory.IdentifierName("SLProtocol")),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("tablePid"))
                    .WithType(
                        SyntaxFactory.PredefinedType(
                            SyntaxFactory.Token(SyntaxKind.IntKeyword))),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("rowPK"))
                    .WithType(
                        SyntaxFactory.PredefinedType(
                            SyntaxFactory.Token(SyntaxKind.StringKeyword))),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("columnIdx"))
                    .WithType(
                        SyntaxFactory.PredefinedType(
                            SyntaxFactory.Token(SyntaxKind.IntKeyword))),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("value"))
                    .WithType(
                        SyntaxFactory.PredefinedType(
                            SyntaxFactory.Token(SyntaxKind.ObjectKeyword))),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("dateTime"))
                    .WithType(
                        SyntaxFactory.NullableType(
                            SyntaxFactory.IdentifierName("DateTime")))
                    .WithDefault(
                        SyntaxFactory.EqualsValueClause(
                            SyntaxFactory.LiteralExpression(
                                SyntaxKind.NullLiteralExpression))),
                })))
    .WithBody(
        SyntaxFactory.Block(
            SyntaxFactory.IfStatement(
                SyntaxFactory.BinaryExpression(
                    SyntaxKind.EqualsExpression,
                    SyntaxFactory.IdentifierName("rowPK"),
                    SyntaxFactory.LiteralExpression(
                        SyntaxKind.NullLiteralExpression)),
                SyntaxFactory.ThrowStatement(
                    SyntaxFactory.ObjectCreationExpression(
                        SyntaxFactory.IdentifierName("ArgumentNullException"))
                    .WithArgumentList(
                        SyntaxFactory.ArgumentList(
                            SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                SyntaxFactory.Argument(
                                    SyntaxFactory.InvocationExpression(
                                        SyntaxFactory.IdentifierName("nameof"))
                                    .WithArgumentList(
                                        SyntaxFactory.ArgumentList(
                                            SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                                SyntaxFactory.Argument(
                                                    SyntaxFactory.IdentifierName("rowPK"))))))))))),
            SyntaxFactory.IfStatement(
                SyntaxFactory.BinaryExpression(
                    SyntaxKind.EqualsExpression,
                    SyntaxFactory.IdentifierName("dateTime"),
                    SyntaxFactory.LiteralExpression(
                        SyntaxKind.NullLiteralExpression)),
                SyntaxFactory.Block(
                    SyntaxFactory.SingletonList<StatementSyntax>(
                        SyntaxFactory.ReturnStatement(
                            SyntaxFactory.InvocationExpression(
                                SyntaxFactory.MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    SyntaxFactory.IdentifierName("protocol"),
                                    SyntaxFactory.IdentifierName("SetParameterIndexByKey")))
                            .WithArgumentList(
                                SyntaxFactory.ArgumentList(
                                    SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                        new SyntaxNodeOrToken[]
                                        {
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.IdentifierName("tablePid")),
                                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.IdentifierName("rowPK")),
                                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.BinaryExpression(
                                                    SyntaxKind.AddExpression,
                                                    SyntaxFactory.IdentifierName("columnIdx"),
                                                    SyntaxFactory.LiteralExpression(
                                                        SyntaxKind.NumericLiteralExpression,
                                                        SyntaxFactory.Literal(1)))),
                                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.IdentifierName("value")),
                                        })))))))
            .WithElse(
                SyntaxFactory.ElseClause(
                    SyntaxFactory.Block(
                        SyntaxFactory.SingletonList<StatementSyntax>(
                            SyntaxFactory.ReturnStatement(
                                SyntaxFactory.InvocationExpression(
                                    SyntaxFactory.MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        SyntaxFactory.IdentifierName("protocol"),
                                        SyntaxFactory.IdentifierName("SetParameterIndexByKey")))
                                .WithArgumentList(
                                    SyntaxFactory.ArgumentList(
                                        SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                            new SyntaxNodeOrToken[]
                                            {
                                                SyntaxFactory.Argument(
                                                    SyntaxFactory.IdentifierName("tablePid")),
                                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                SyntaxFactory.Argument(
                                                    SyntaxFactory.IdentifierName("rowPK")),
                                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                SyntaxFactory.Argument(
                                                    SyntaxFactory.BinaryExpression(
                                                        SyntaxKind.AddExpression,
                                                        SyntaxFactory.IdentifierName("columnIdx"),
                                                        SyntaxFactory.LiteralExpression(
                                                            SyntaxKind.NumericLiteralExpression,
                                                            SyntaxFactory.Literal(1)))),
                                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                SyntaxFactory.Argument(
                                                    SyntaxFactory.IdentifierName("value")),
                                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                SyntaxFactory.Argument(
                                                    SyntaxFactory.MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        SyntaxFactory.IdentifierName("dateTime"),
                                                        SyntaxFactory.IdentifierName("Value"))),
                                            }))))))))));
        }

        /// <summary>
        /// Generating SetColumns method.
        /// </summary>
        /// <returns>MethodDeclarationSyntax.</returns>
        public static MethodDeclarationSyntax GenerateSetColumnsMethod()
        {
            return SyntaxFactory.MethodDeclaration(
        SyntaxFactory.PredefinedType(
            SyntaxFactory.Token(SyntaxKind.VoidKeyword)),
        SyntaxFactory.Identifier("SetColumns"))
    .WithModifiers(
        SyntaxFactory.TokenList(
            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
            SyntaxFactory.Token(SyntaxKind.StaticKeyword)))
    .WithParameterList(
        SyntaxFactory.ParameterList(
            SyntaxFactory.SeparatedList<ParameterSyntax>(
                new SyntaxNodeOrToken[]
                {
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("protocol"))
                    .WithModifiers(
                        SyntaxFactory.TokenList(
                            SyntaxFactory.Token(SyntaxKind.ThisKeyword)))
                    .WithType(
                        SyntaxFactory.IdentifierName("SLProtocol")),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("columnsPid"))
                    .WithType(
                        SyntaxFactory.GenericName(
                            SyntaxFactory.Identifier("IList"))
                        .WithTypeArgumentList(
                            SyntaxFactory.TypeArgumentList(
                                SyntaxFactory.SingletonSeparatedList<TypeSyntax>(
                                    SyntaxFactory.PredefinedType(
                                        SyntaxFactory.Token(SyntaxKind.IntKeyword)))))),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("columnsValues"))
                    .WithType(
                        SyntaxFactory.GenericName(
                            SyntaxFactory.Identifier("IList"))
                        .WithTypeArgumentList(
                            SyntaxFactory.TypeArgumentList(
                                SyntaxFactory.SingletonSeparatedList<TypeSyntax>(
                                    SyntaxFactory.GenericName(
                                        SyntaxFactory.Identifier("IEnumerable"))
                                    .WithTypeArgumentList(
                                        SyntaxFactory.TypeArgumentList(
                                            SyntaxFactory.SingletonSeparatedList<TypeSyntax>(
                                                SyntaxFactory.PredefinedType(
                                                    SyntaxFactory.Token(SyntaxKind.ObjectKeyword))))))))),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("dateTime"))
                    .WithType(
                        SyntaxFactory.NullableType(
                            SyntaxFactory.IdentifierName("DateTime")))
                    .WithDefault(
                        SyntaxFactory.EqualsValueClause(
                            SyntaxFactory.LiteralExpression(
                                SyntaxKind.NullLiteralExpression))),
                })))
    .WithBody(
    SyntaxFactory.Block(
        SyntaxFactory.IfStatement(
            SyntaxFactory.BinaryExpression(
                SyntaxKind.EqualsExpression,
                SyntaxFactory.IdentifierName("columnsPid"),
                SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression)),
            SyntaxFactory.ThrowStatement(
                SyntaxFactory.ObjectCreationExpression(
                    SyntaxFactory.IdentifierName("ArgumentNullException"))
                .WithArgumentList(
                    SyntaxFactory.ArgumentList(
                        SyntaxFactory.SingletonSeparatedList(
                            SyntaxFactory.Argument(
                                SyntaxFactory.InvocationExpression(
                                    SyntaxFactory.IdentifierName("nameof"))
                                .WithArgumentList(
                                    SyntaxFactory.ArgumentList(
                                        SyntaxFactory.SingletonSeparatedList(
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.IdentifierName("columnsPid")))))))))))
        .WithIfKeyword(
            SyntaxFactory.Token(
                SyntaxFactory.TriviaList(
                    SyntaxFactory.Comment("// Sanity checks")),
                SyntaxKind.IfKeyword,
                SyntaxFactory.TriviaList())),
        SyntaxFactory.IfStatement(
            SyntaxFactory.BinaryExpression(
                SyntaxKind.EqualsExpression,
                SyntaxFactory.IdentifierName("columnsValues"),
                SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression)),
            SyntaxFactory.ThrowStatement(
                SyntaxFactory.ObjectCreationExpression(
                    SyntaxFactory.IdentifierName("ArgumentNullException"))
                .WithArgumentList(
                    SyntaxFactory.ArgumentList(
                        SyntaxFactory.SingletonSeparatedList(
                            SyntaxFactory.Argument(
                                SyntaxFactory.InvocationExpression(
                                    SyntaxFactory.IdentifierName("nameof"))
                                .WithArgumentList(
                                    SyntaxFactory.ArgumentList(
                                        SyntaxFactory.SingletonSeparatedList(
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.IdentifierName("columnsValues"))))))))))),
        SyntaxFactory.IfStatement(
            SyntaxFactory.BinaryExpression(
                SyntaxKind.NotEqualsExpression,
                SyntaxFactory.MemberAccessExpression(
                    SyntaxKind.SimpleMemberAccessExpression,
                    SyntaxFactory.IdentifierName("columnsPid"),
                    SyntaxFactory.IdentifierName("Count")),
                SyntaxFactory.MemberAccessExpression(
                    SyntaxKind.SimpleMemberAccessExpression,
                    SyntaxFactory.IdentifierName("columnsValues"),
                    SyntaxFactory.IdentifierName("Count"))),
            SyntaxFactory.ThrowStatement(
                SyntaxFactory.ObjectCreationExpression(
                    SyntaxFactory.IdentifierName("ArgumentException"))
                .WithArgumentList(
                    SyntaxFactory.ArgumentList(
                        SyntaxFactory.SingletonSeparatedList(
                            SyntaxFactory.Argument(
                                SyntaxFactory.InterpolatedStringExpression(
                                    SyntaxFactory.Token(SyntaxKind.InterpolatedStringStartToken))
                                .WithContents(
                                    SyntaxFactory.List(
                                        new InterpolatedStringContentSyntax[]
                                        {
                                            SyntaxFactory.InterpolatedStringText()
                                            .WithTextToken(
                                                SyntaxFactory.Token(
                                                    SyntaxFactory.TriviaList(),
                                                    SyntaxKind.InterpolatedStringTextToken,
                                                    "Length of ",
                                                    "Length of ",
                                                    SyntaxFactory.TriviaList())),
                                            SyntaxFactory.Interpolation(
                                                SyntaxFactory.InvocationExpression(
                                                    SyntaxFactory.IdentifierName("nameof"))
                                                .WithArgumentList(
                                                    SyntaxFactory.ArgumentList(
                                                        SyntaxFactory.SingletonSeparatedList(
                                                            SyntaxFactory.Argument(
                                                                SyntaxFactory.IdentifierName("columnsPid")))))),
                                            SyntaxFactory.InterpolatedStringText()
                                            .WithTextToken(
                                                SyntaxFactory.Token(
                                                    SyntaxFactory.TriviaList(),
                                                    SyntaxKind.InterpolatedStringTextToken,
                                                    " '",
                                                    " '",
                                                    SyntaxFactory.TriviaList())),
                                            SyntaxFactory.Interpolation(
                                                SyntaxFactory.MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    SyntaxFactory.IdentifierName("columnsPid"),
                                                    SyntaxFactory.IdentifierName("Count"))),
                                            SyntaxFactory.InterpolatedStringText()
                                            .WithTextToken(
                                                SyntaxFactory.Token(
                                                    SyntaxFactory.TriviaList(),
                                                    SyntaxKind.InterpolatedStringTextToken,
                                                    "' != length of ",
                                                    "' != length of ",
                                                    SyntaxFactory.TriviaList())),
                                            SyntaxFactory.Interpolation(
                                                SyntaxFactory.InvocationExpression(
                                                    SyntaxFactory.IdentifierName("nameof"))
                                                .WithArgumentList(
                                                    SyntaxFactory.ArgumentList(
                                                        SyntaxFactory.SingletonSeparatedList(
                                                            SyntaxFactory.Argument(
                                                                SyntaxFactory.IdentifierName("columnsValues")))))),
                                            SyntaxFactory.InterpolatedStringText()
                                            .WithTextToken(
                                                SyntaxFactory.Token(
                                                    SyntaxFactory.TriviaList(),
                                                    SyntaxKind.InterpolatedStringTextToken,
                                                    " '",
                                                    " '",
                                                    SyntaxFactory.TriviaList())),
                                            SyntaxFactory.Interpolation(
                                                SyntaxFactory.MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    SyntaxFactory.IdentifierName("columnsValues"),
                                                    SyntaxFactory.IdentifierName("Count"))),
                                            SyntaxFactory.InterpolatedStringText()
                                            .WithTextToken(
                                                SyntaxFactory.Token(
                                                    SyntaxFactory.TriviaList(),
                                                    SyntaxKind.InterpolatedStringTextToken,
                                                    "'.",
                                                    "'.",
                                                    SyntaxFactory.TriviaList())),
                                        })))))))),
        SyntaxFactory.LocalDeclarationStatement(
            SyntaxFactory.VariableDeclaration(
                SyntaxFactory.PredefinedType(
                    SyntaxFactory.Token(
                        SyntaxFactory.TriviaList(
                            SyntaxFactory.Comment("// Prepare data")),
                        SyntaxKind.IntKeyword,
                        SyntaxFactory.TriviaList())))
            .WithVariables(
                SyntaxFactory.SingletonSeparatedList(
                    SyntaxFactory.VariableDeclarator(
                        SyntaxFactory.Identifier("columnsCount"))
                    .WithInitializer(
                        SyntaxFactory.EqualsValueClause(
                            SyntaxFactory.MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                SyntaxFactory.IdentifierName("columnsPid"),
                                SyntaxFactory.IdentifierName("Count"))))))),
        SyntaxFactory.LocalDeclarationStatement(
            SyntaxFactory.VariableDeclaration(
                SyntaxFactory.ArrayType(
                    SyntaxFactory.PredefinedType(
                        SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                .WithRankSpecifiers(
                    SyntaxFactory.SingletonList(
                        SyntaxFactory.ArrayRankSpecifier(
                            SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                SyntaxFactory.OmittedArraySizeExpression())))))
            .WithVariables(
                SyntaxFactory.SingletonSeparatedList(
                    SyntaxFactory.VariableDeclarator(
                        SyntaxFactory.Identifier("columnsPidArray"))
                    .WithInitializer(
                        SyntaxFactory.EqualsValueClause(
                            SyntaxFactory.ArrayCreationExpression(
                                SyntaxFactory.ArrayType(
                                    SyntaxFactory.PredefinedType(
                                        SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                                .WithRankSpecifiers(
                                    SyntaxFactory.SingletonList(
                                        SyntaxFactory.ArrayRankSpecifier(
                                            SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                SyntaxFactory.BinaryExpression(
                                                    SyntaxKind.AddExpression,
                                                    SyntaxFactory.IdentifierName("columnsCount"),
                                                    SyntaxFactory.LiteralExpression(
                                                        SyntaxKind.NumericLiteralExpression,
                                                        SyntaxFactory.Literal(1))))))))))))),
        SyntaxFactory.LocalDeclarationStatement(
            SyntaxFactory.VariableDeclaration(
                SyntaxFactory.ArrayType(
                    SyntaxFactory.PredefinedType(
                        SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                .WithRankSpecifiers(
                    SyntaxFactory.SingletonList(
                        SyntaxFactory.ArrayRankSpecifier(
                            SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                SyntaxFactory.OmittedArraySizeExpression())))))
            .WithVariables(
                SyntaxFactory.SingletonSeparatedList(
                    SyntaxFactory.VariableDeclarator(
                        SyntaxFactory.Identifier("columnsValuesArray"))
                    .WithInitializer(
                        SyntaxFactory.EqualsValueClause(
                            SyntaxFactory.ArrayCreationExpression(
                                SyntaxFactory.ArrayType(
                                    SyntaxFactory.PredefinedType(
                                        SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                                .WithRankSpecifiers(
                                    SyntaxFactory.SingletonList(
                                        SyntaxFactory.ArrayRankSpecifier(
                                            SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                SyntaxFactory.IdentifierName("columnsCount"))))))))))),
        SyntaxFactory.ForStatement(
            SyntaxFactory.Block(
                SyntaxFactory.ExpressionStatement(
                    SyntaxFactory.AssignmentExpression(
                        SyntaxKind.SimpleAssignmentExpression,
                        SyntaxFactory.ElementAccessExpression(
                            SyntaxFactory.IdentifierName("columnsPidArray"))
                        .WithArgumentList(
                            SyntaxFactory.BracketedArgumentList(
                                SyntaxFactory.SingletonSeparatedList(
                                    SyntaxFactory.Argument(
                                        SyntaxFactory.IdentifierName("i"))))),
                        SyntaxFactory.ElementAccessExpression(
                            SyntaxFactory.IdentifierName("columnsPid"))
                        .WithArgumentList(
                            SyntaxFactory.BracketedArgumentList(
                                SyntaxFactory.SingletonSeparatedList(
                                    SyntaxFactory.Argument(
                                        SyntaxFactory.IdentifierName("i"))))))),
                SyntaxFactory.ExpressionStatement(
                    SyntaxFactory.AssignmentExpression(
                        SyntaxKind.SimpleAssignmentExpression,
                        SyntaxFactory.ElementAccessExpression(
                            SyntaxFactory.IdentifierName("columnsValuesArray"))
                        .WithArgumentList(
                            SyntaxFactory.BracketedArgumentList(
                                SyntaxFactory.SingletonSeparatedList(
                                    SyntaxFactory.Argument(
                                        SyntaxFactory.IdentifierName("i"))))),
                        SyntaxFactory.ElementAccessExpression(
                            SyntaxFactory.IdentifierName("columnsValues"))
                        .WithArgumentList(
                            SyntaxFactory.BracketedArgumentList(
                                SyntaxFactory.SingletonSeparatedList(
                                    SyntaxFactory.Argument(
                                        SyntaxFactory.IdentifierName("i")))))))))
        .WithDeclaration(
            SyntaxFactory.VariableDeclaration(
                SyntaxFactory.PredefinedType(
                    SyntaxFactory.Token(SyntaxKind.IntKeyword)))
            .WithVariables(
                SyntaxFactory.SingletonSeparatedList(
                    SyntaxFactory.VariableDeclarator(
                        SyntaxFactory.Identifier("i"))
                    .WithInitializer(
                        SyntaxFactory.EqualsValueClause(
                            SyntaxFactory.LiteralExpression(
                                SyntaxKind.NumericLiteralExpression,
                                SyntaxFactory.Literal(0)))))))
        .WithCondition(
            SyntaxFactory.BinaryExpression(
                SyntaxKind.LessThanExpression,
                SyntaxFactory.IdentifierName("i"),
                SyntaxFactory.IdentifierName("columnsCount")))
        .WithIncrementors(
            SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                SyntaxFactory.PostfixUnaryExpression(
                    SyntaxKind.PostIncrementExpression,
                    SyntaxFactory.IdentifierName("i")))),
        SyntaxFactory.LocalDeclarationStatement(
            SyntaxFactory.VariableDeclaration(
                SyntaxFactory.ArrayType(
                    SyntaxFactory.PredefinedType(
                        SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                .WithRankSpecifiers(
                    SyntaxFactory.SingletonList<ArrayRankSpecifierSyntax>(
                        SyntaxFactory.ArrayRankSpecifier(
                            SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                SyntaxFactory.OmittedArraySizeExpression())))))
            .WithVariables(
                SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                    SyntaxFactory.VariableDeclarator(
                        SyntaxFactory.Identifier("setColumnOptions"))
                    .WithInitializer(
                        SyntaxFactory.EqualsValueClause(
                            SyntaxFactory.ConditionalExpression(
                                SyntaxFactory.BinaryExpression(
                                    SyntaxKind.EqualsExpression,
                                    SyntaxFactory.IdentifierName("dateTime"),
                                    SyntaxFactory.LiteralExpression(SyntaxKind.NullLiteralExpression)),
                                SyntaxFactory.ArrayCreationExpression(
                                    SyntaxFactory.ArrayType(
                                        SyntaxFactory.PredefinedType(
                                            SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                                    .WithRankSpecifiers(
                                        SyntaxFactory.SingletonList<ArrayRankSpecifierSyntax>(
                                            SyntaxFactory.ArrayRankSpecifier(
                                                SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                    SyntaxFactory.OmittedArraySizeExpression())))))
                                .WithInitializer(
                                    SyntaxFactory.InitializerExpression(
                                        SyntaxKind.ArrayInitializerExpression,
                                        SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                            SyntaxFactory.LiteralExpression(SyntaxKind.TrueLiteralExpression)))),
                                SyntaxFactory.ArrayCreationExpression(
                                    SyntaxFactory.ArrayType(
                                        SyntaxFactory.PredefinedType(
                                            SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                                    .WithRankSpecifiers(
                                        SyntaxFactory.SingletonList<ArrayRankSpecifierSyntax>(
                                            SyntaxFactory.ArrayRankSpecifier(
                                                SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                    SyntaxFactory.OmittedArraySizeExpression())))))
                                .WithInitializer(
                                    SyntaxFactory.InitializerExpression(
                                        SyntaxKind.ArrayInitializerExpression,
                                        SyntaxFactory.SeparatedList<ExpressionSyntax>(
                                            new SyntaxNodeOrToken[]
                                            {
                                                SyntaxFactory.LiteralExpression(SyntaxKind.TrueLiteralExpression),
                                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                SyntaxFactory.MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    SyntaxFactory.IdentifierName("dateTime"),
                                                    SyntaxFactory.IdentifierName("Value")),
                                            }))))))))),
        SyntaxFactory.ExpressionStatement(
            SyntaxFactory.AssignmentExpression(
                SyntaxKind.SimpleAssignmentExpression,
                SyntaxFactory.ElementAccessExpression(
                    SyntaxFactory.IdentifierName("columnsPidArray"))
                .WithArgumentList(
                    SyntaxFactory.BracketedArgumentList(
                        SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                            SyntaxFactory.Argument(
                                SyntaxFactory.IdentifierName("columnsCount"))))),
                SyntaxFactory.IdentifierName("setColumnOptions"))),
        SyntaxFactory.ExpressionStatement(
            SyntaxFactory.InvocationExpression(
                SyntaxFactory.MemberAccessExpression(
                    SyntaxKind.SimpleMemberAccessExpression,
                    SyntaxFactory.IdentifierName("protocol"),
                    SyntaxFactory.IdentifierName("NotifyProtocol")))
            .WithArgumentList(
                SyntaxFactory.ArgumentList(
                    SyntaxFactory.SeparatedList<ArgumentSyntax>(
                        new SyntaxNodeOrToken[]
                        {
                            SyntaxFactory.Argument(
                                SyntaxFactory.LiteralExpression(
                                    SyntaxKind.NumericLiteralExpression,
                                    SyntaxFactory.Literal(220))),
                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                            SyntaxFactory.Argument(
                                SyntaxFactory.IdentifierName("columnsPidArray")),
                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                            SyntaxFactory.Argument(
                                SyntaxFactory.IdentifierName("columnsValuesArray")),
                        }))))));
        }

        /// <summary>
        /// Generating SetParameters method.
        /// </summary>
        /// <returns>MethodDeclarationSyntax.</returns>
        public static MethodDeclarationSyntax GenerateSetParametersMethod()
        {
            return SyntaxFactory.MethodDeclaration(
    SyntaxFactory.PredefinedType(
        SyntaxFactory.Token(SyntaxKind.VoidKeyword)),
    SyntaxFactory.Identifier("SetParameters"))
    .WithModifiers(
        SyntaxFactory.TokenList(
            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
            SyntaxFactory.Token(SyntaxKind.StaticKeyword)))
    .WithParameterList(
        SyntaxFactory.ParameterList(
            SyntaxFactory.SeparatedList<ParameterSyntax>(
                new SyntaxNodeOrToken[]
                {
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("protocol"))
                    .WithModifiers(
                        SyntaxFactory.TokenList(
                            SyntaxFactory.Token(SyntaxKind.ThisKeyword)))
                    .WithType(
                        SyntaxFactory.IdentifierName("SLProtocol")),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("paramsToSet"))
                    .WithType(
                        SyntaxFactory.GenericName(
                            SyntaxFactory.Identifier("IDictionary"))
                        .WithTypeArgumentList(
                            SyntaxFactory.TypeArgumentList(
                                SyntaxFactory.SeparatedList<TypeSyntax>(
                                    new SyntaxNodeOrToken[]
                                    {
                                        SyntaxFactory.PredefinedType(
                                            SyntaxFactory.Token(SyntaxKind.IntKeyword)),
                                        SyntaxFactory.Token(SyntaxKind.CommaToken),
                                        SyntaxFactory.PredefinedType(
                                            SyntaxFactory.Token(SyntaxKind.ObjectKeyword)),
                                    })))),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("dateTime"))
                    .WithType(
                        SyntaxFactory.NullableType(
                            SyntaxFactory.IdentifierName("DateTime")))
                    .WithDefault(
                        SyntaxFactory.EqualsValueClause(
                            SyntaxFactory.LiteralExpression(
                                SyntaxKind.NullLiteralExpression))),
                })))
    .WithBody(
        SyntaxFactory.Block(
            SyntaxFactory.IfStatement(
                SyntaxFactory.BinaryExpression(
                    SyntaxKind.EqualsExpression,
                    SyntaxFactory.IdentifierName("paramsToSet"),
                    SyntaxFactory.LiteralExpression(
                        SyntaxKind.NullLiteralExpression)),
                SyntaxFactory.ThrowStatement(
                    SyntaxFactory.ObjectCreationExpression(
                        SyntaxFactory.IdentifierName("ArgumentNullException"))
                    .WithArgumentList(
                        SyntaxFactory.ArgumentList(
                            SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                SyntaxFactory.Argument(
                                    SyntaxFactory.InvocationExpression(
                                        SyntaxFactory.IdentifierName(
                                            SyntaxFactory.Identifier(
                                                SyntaxFactory.TriviaList(),
                                                SyntaxKind.NameOfKeyword,
                                                "nameof",
                                                "nameof",
                                                SyntaxFactory.TriviaList())))
                                    .WithArgumentList(
                                        SyntaxFactory.ArgumentList(
                                            SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                                SyntaxFactory.Argument(
                                                    SyntaxFactory.IdentifierName("paramsToSet")))))))))))
            .WithIfKeyword(
                SyntaxFactory.Token(
                    SyntaxFactory.TriviaList(
                        SyntaxFactory.Comment("// Sanity checks")),
                    SyntaxKind.IfKeyword,
                    SyntaxFactory.TriviaList())),
            SyntaxFactory.IfStatement(
                SyntaxFactory.BinaryExpression(
                    SyntaxKind.EqualsExpression,
                    SyntaxFactory.MemberAccessExpression(
                        SyntaxKind.SimpleMemberAccessExpression,
                        SyntaxFactory.IdentifierName("paramsToSet"),
                        SyntaxFactory.IdentifierName("Count")),
                    SyntaxFactory.LiteralExpression(
                        SyntaxKind.NumericLiteralExpression,
                        SyntaxFactory.Literal(0))),
                SyntaxFactory.ReturnStatement()),
            SyntaxFactory.IfStatement(
                SyntaxFactory.BinaryExpression(
                    SyntaxKind.EqualsExpression,
                    SyntaxFactory.IdentifierName("dateTime"),
                    SyntaxFactory.LiteralExpression(
                        SyntaxKind.NullLiteralExpression)),
                SyntaxFactory.Block(
                    SyntaxFactory.SingletonList<StatementSyntax>(
                        SyntaxFactory.ExpressionStatement(
                            SyntaxFactory.InvocationExpression(
                                SyntaxFactory.MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    SyntaxFactory.IdentifierName("protocol"),
                                    SyntaxFactory.IdentifierName("SetParameters")))
                            .WithArgumentList(
                                SyntaxFactory.ArgumentList(
                                    SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                        new SyntaxNodeOrToken[]
                                        {
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.InvocationExpression(
                                                    SyntaxFactory.MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        SyntaxFactory.MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            SyntaxFactory.IdentifierName("paramsToSet"),
                                                            SyntaxFactory.IdentifierName("Keys")),
                                                        SyntaxFactory.IdentifierName("ToArray")))),
                                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.InvocationExpression(
                                                    SyntaxFactory.MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        SyntaxFactory.MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            SyntaxFactory.IdentifierName("paramsToSet"),
                                                            SyntaxFactory.IdentifierName("Values")),
                                                        SyntaxFactory.IdentifierName("ToArray")))),
                                        })))))))
            .WithElse(
                SyntaxFactory.ElseClause(
                    SyntaxFactory.Block(
                        SyntaxFactory.LocalDeclarationStatement(
                            SyntaxFactory.VariableDeclaration(
                                SyntaxFactory.ArrayType(
                                    SyntaxFactory.IdentifierName("DateTime"))
                                .WithRankSpecifiers(
                                    SyntaxFactory.SingletonList<ArrayRankSpecifierSyntax>(
                                        SyntaxFactory.ArrayRankSpecifier(
                                            SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                SyntaxFactory.OmittedArraySizeExpression())))))
                            .WithVariables(
                                SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                                    SyntaxFactory.VariableDeclarator(
                                        SyntaxFactory.Identifier("historySetDates"))
                                    .WithInitializer(
                                        SyntaxFactory.EqualsValueClause(
                                            SyntaxFactory.ArrayCreationExpression(
                                                SyntaxFactory.ArrayType(
                                                    SyntaxFactory.IdentifierName("DateTime"))
                                                .WithRankSpecifiers(
                                                    SyntaxFactory.SingletonList<ArrayRankSpecifierSyntax>(
                                                        SyntaxFactory.ArrayRankSpecifier(
                                                            SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                                SyntaxFactory.MemberAccessExpression(
                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                    SyntaxFactory.IdentifierName("paramsToSet"),
                                                                    SyntaxFactory.IdentifierName("Count")))))))))))),
                        SyntaxFactory.ForStatement(
                            SyntaxFactory.Block(
                                SyntaxFactory.SingletonList<StatementSyntax>(
                                    SyntaxFactory.ExpressionStatement(
                                        SyntaxFactory.AssignmentExpression(
                                            SyntaxKind.SimpleAssignmentExpression,
                                            SyntaxFactory.ElementAccessExpression(
                                                SyntaxFactory.IdentifierName("historySetDates"))
                                            .WithArgumentList(
                                                SyntaxFactory.BracketedArgumentList(
                                                    SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                                        SyntaxFactory.Argument(
                                                            SyntaxFactory.IdentifierName("i"))))),
                                            SyntaxFactory.MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                SyntaxFactory.IdentifierName("dateTime"),
                                                SyntaxFactory.IdentifierName("Value")))))))
                        .WithDeclaration(
                            SyntaxFactory.VariableDeclaration(
                                SyntaxFactory.PredefinedType(
                                    SyntaxFactory.Token(SyntaxKind.IntKeyword)))
                            .WithVariables(
                                SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                                    SyntaxFactory.VariableDeclarator(
                                        SyntaxFactory.Identifier("i"))
                                    .WithInitializer(
                                        SyntaxFactory.EqualsValueClause(
                                            SyntaxFactory.LiteralExpression(
                                                SyntaxKind.NumericLiteralExpression,
                                                SyntaxFactory.Literal(0)))))))
                        .WithCondition(
                            SyntaxFactory.BinaryExpression(
                                SyntaxKind.LessThanExpression,
                                SyntaxFactory.IdentifierName("i"),
                                SyntaxFactory.MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    SyntaxFactory.IdentifierName("historySetDates"),
                                    SyntaxFactory.IdentifierName("Length"))))
                        .WithIncrementors(
                            SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                SyntaxFactory.PostfixUnaryExpression(
                                    SyntaxKind.PostIncrementExpression,
                                    SyntaxFactory.IdentifierName("i")))),
                        SyntaxFactory.ExpressionStatement(
                            SyntaxFactory.InvocationExpression(
                                SyntaxFactory.MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    SyntaxFactory.IdentifierName("protocol"),
                                    SyntaxFactory.IdentifierName("SetParameters")))
                            .WithArgumentList(
                                SyntaxFactory.ArgumentList(
                                    SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                        new SyntaxNodeOrToken[]
                                        {
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.InvocationExpression(
                                                    SyntaxFactory.MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        SyntaxFactory.MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            SyntaxFactory.IdentifierName("paramsToSet"),
                                                            SyntaxFactory.IdentifierName("Keys")),
                                                        SyntaxFactory.IdentifierName("ToArray")))),
                                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.InvocationExpression(
                                                    SyntaxFactory.MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        SyntaxFactory.MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            SyntaxFactory.IdentifierName("paramsToSet"),
                                                            SyntaxFactory.IdentifierName("Values")),
                                                        SyntaxFactory.IdentifierName("ToArray")))),
                                            SyntaxFactory.Token(SyntaxKind.CommaToken),
                                            SyntaxFactory.Argument(
                                                SyntaxFactory.IdentifierName("historySetDates")),
                                        })))))))));
        }

        /// <summary>
        /// Generating SetColumns method.
        /// </summary>
        /// <returns>MethodDeclarationSyntax.</returns>
        public static MethodDeclarationSyntax GenerateSetColumnsMethod2()
        {
            return SyntaxFactory.MethodDeclaration(
    SyntaxFactory.PredefinedType(
        SyntaxFactory.Token(SyntaxKind.VoidKeyword)),
    SyntaxFactory.Identifier("SetColumns"))
    .WithModifiers(
        SyntaxFactory.TokenList(
            SyntaxFactory.Token(SyntaxKind.PublicKeyword),
            SyntaxFactory.Token(SyntaxKind.StaticKeyword)))
    .WithParameterList(
        SyntaxFactory.ParameterList(
            SyntaxFactory.SeparatedList<ParameterSyntax>(
                new SyntaxNodeOrToken[]
                {
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("protocol"))
                    .WithModifiers(
                        SyntaxFactory.TokenList(
                            SyntaxFactory.Token(SyntaxKind.ThisKeyword)))
                    .WithType(
                        SyntaxFactory.IdentifierName("SLProtocol")),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("setColumnsData"))
                    .WithType(
                        SyntaxFactory.GenericName(
                            SyntaxFactory.Identifier("IDictionary"))
                        .WithTypeArgumentList(
                            SyntaxFactory.TypeArgumentList(
                                SyntaxFactory.SeparatedList<TypeSyntax>(
                                    new SyntaxNodeOrToken[]
                                    {
                                        SyntaxFactory.PredefinedType(
                                            SyntaxFactory.Token(SyntaxKind.IntKeyword)),
                                        SyntaxFactory.Token(SyntaxKind.CommaToken),
                                        SyntaxFactory.GenericName(
                                            SyntaxFactory.Identifier("List"))
                                        .WithTypeArgumentList(
                                            SyntaxFactory.TypeArgumentList(
                                                SyntaxFactory.SingletonSeparatedList<TypeSyntax>(
                                                    SyntaxFactory.PredefinedType(
                                                        SyntaxFactory.Token(SyntaxKind.ObjectKeyword))))),
                                    })))),
                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                    SyntaxFactory.Parameter(
                        SyntaxFactory.Identifier("dateTime"))
                    .WithType(
                        SyntaxFactory.NullableType(
                            SyntaxFactory.IdentifierName("DateTime")))
                    .WithDefault(
                        SyntaxFactory.EqualsValueClause(
                            SyntaxFactory.LiteralExpression(
                                SyntaxKind.NullLiteralExpression))),
                })))
    .WithBody(
        SyntaxFactory.Block(
            SyntaxFactory.IfStatement(
                SyntaxFactory.BinaryExpression(
                    SyntaxKind.EqualsExpression,
                    SyntaxFactory.IdentifierName("setColumnsData"),
                    SyntaxFactory.LiteralExpression(
                        SyntaxKind.NullLiteralExpression)),
                SyntaxFactory.ThrowStatement(
                    SyntaxFactory.ObjectCreationExpression(
                        SyntaxFactory.IdentifierName("ArgumentNullException"))
                    .WithArgumentList(
                        SyntaxFactory.ArgumentList(
                            SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                SyntaxFactory.Argument(
                                    SyntaxFactory.InvocationExpression(
                                        SyntaxFactory.IdentifierName(
                                            SyntaxFactory.Identifier(
                                                SyntaxFactory.TriviaList(),
                                                SyntaxKind.NameOfKeyword,
                                                "nameof",
                                                "nameof",
                                                SyntaxFactory.TriviaList())))
                                    .WithArgumentList(
                                        SyntaxFactory.ArgumentList(
                                            SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                                SyntaxFactory.Argument(
                                                    SyntaxFactory.IdentifierName("setColumnsData"))))))))))),
            SyntaxFactory.IfStatement(
                SyntaxFactory.BinaryExpression(
                    SyntaxKind.EqualsExpression,
                    SyntaxFactory.MemberAccessExpression(
                        SyntaxKind.SimpleMemberAccessExpression,
                        SyntaxFactory.IdentifierName("setColumnsData"),
                        SyntaxFactory.IdentifierName("Count")),
                    SyntaxFactory.LiteralExpression(
                        SyntaxKind.NumericLiteralExpression,
                        SyntaxFactory.Literal(0))),
                SyntaxFactory.ReturnStatement()),
            SyntaxFactory.LocalDeclarationStatement(
                SyntaxFactory.VariableDeclaration(
                    SyntaxFactory.PredefinedType(
                        SyntaxFactory.Token(SyntaxKind.IntKeyword)))
                .WithVariables(
                    SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                        SyntaxFactory.VariableDeclarator(
                            SyntaxFactory.Identifier("rowCount"))
                        .WithInitializer(
                            SyntaxFactory.EqualsValueClause(
                                SyntaxFactory.MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    SyntaxFactory.MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        SyntaxFactory.InvocationExpression(
                                            SyntaxFactory.MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                SyntaxFactory.IdentifierName("setColumnsData"),
                                                SyntaxFactory.IdentifierName("ElementAt")))
                                        .WithArgumentList(
                                            SyntaxFactory.ArgumentList(
                                                SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                                    SyntaxFactory.Argument(
                                                        SyntaxFactory.LiteralExpression(
                                                            SyntaxKind.NumericLiteralExpression,
                                                            SyntaxFactory.Literal(0)))))),
                                        SyntaxFactory.IdentifierName("Value")),
                                    SyntaxFactory.IdentifierName("Count"))))))),
            SyntaxFactory.IfStatement(
                SyntaxFactory.BinaryExpression(
                    SyntaxKind.EqualsExpression,
                    SyntaxFactory.IdentifierName("rowCount"),
                    SyntaxFactory.LiteralExpression(
                        SyntaxKind.NumericLiteralExpression,
                        SyntaxFactory.Literal(0))),
                SyntaxFactory.Block(
                    SyntaxFactory.SingletonList<StatementSyntax>(
                        SyntaxFactory.ReturnStatement()))),
            SyntaxFactory.LocalDeclarationStatement(
                SyntaxFactory.VariableDeclaration(
                    SyntaxFactory.ArrayType(
                        SyntaxFactory.PredefinedType(
                            SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                    .WithRankSpecifiers(
                        SyntaxFactory.SingletonList<ArrayRankSpecifierSyntax>(
                            SyntaxFactory.ArrayRankSpecifier(
                                SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                    SyntaxFactory.OmittedArraySizeExpression())))))
                .WithVariables(
                    SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                        SyntaxFactory.VariableDeclarator(
                            SyntaxFactory.Identifier("setColumnPids"))
                        .WithInitializer(
                            SyntaxFactory.EqualsValueClause(
                                SyntaxFactory.ArrayCreationExpression(
                                    SyntaxFactory.ArrayType(
                                        SyntaxFactory.PredefinedType(
                                            SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                                    .WithRankSpecifiers(
                                        SyntaxFactory.SingletonList<ArrayRankSpecifierSyntax>(
                                            SyntaxFactory.ArrayRankSpecifier(
                                                SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                    SyntaxFactory.BinaryExpression(
                                                        SyntaxKind.AddExpression,
                                                        SyntaxFactory.MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            SyntaxFactory.IdentifierName("setColumnsData"),
                                                            SyntaxFactory.IdentifierName("Count")),
                                                        SyntaxFactory.LiteralExpression(
                                                            SyntaxKind.NumericLiteralExpression,
                                                            SyntaxFactory.Literal(1))))))))))))),
            SyntaxFactory.LocalDeclarationStatement(
                SyntaxFactory.VariableDeclaration(
                    SyntaxFactory.ArrayType(
                        SyntaxFactory.PredefinedType(
                            SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                    .WithRankSpecifiers(
                        SyntaxFactory.SingletonList<ArrayRankSpecifierSyntax>(
                            SyntaxFactory.ArrayRankSpecifier(
                                SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                    SyntaxFactory.OmittedArraySizeExpression())))))
                .WithVariables(
                    SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                        SyntaxFactory.VariableDeclarator(
                            SyntaxFactory.Identifier("setColumnValues"))
                        .WithInitializer(
                            SyntaxFactory.EqualsValueClause(
                                SyntaxFactory.ArrayCreationExpression(
                                    SyntaxFactory.ArrayType(
                                        SyntaxFactory.PredefinedType(
                                            SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                                    .WithRankSpecifiers(
                                        SyntaxFactory.SingletonList<ArrayRankSpecifierSyntax>(
                                            SyntaxFactory.ArrayRankSpecifier(
                                                SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                    SyntaxFactory.MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        SyntaxFactory.IdentifierName("setColumnsData"),
                                                        SyntaxFactory.IdentifierName("Count")))))))))))),
            SyntaxFactory.LocalDeclarationStatement(
                SyntaxFactory.VariableDeclaration(
                    SyntaxFactory.PredefinedType(
                        SyntaxFactory.Token(SyntaxKind.IntKeyword)))
                .WithVariables(
                    SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                        SyntaxFactory.VariableDeclarator(
                            SyntaxFactory.Identifier("columnPos"))
                        .WithInitializer(
                            SyntaxFactory.EqualsValueClause(
                                SyntaxFactory.LiteralExpression(
                                    SyntaxKind.NumericLiteralExpression,
                                    SyntaxFactory.Literal(0))))))),
            SyntaxFactory.ForEachStatement(
                SyntaxFactory.IdentifierName(
                    SyntaxFactory.Identifier(
                        SyntaxFactory.TriviaList(),
                        SyntaxKind.VarKeyword,
                        "var",
                        "var",
                        SyntaxFactory.TriviaList())),
                SyntaxFactory.Identifier("setColumnData"),
                SyntaxFactory.IdentifierName("setColumnsData"),
                SyntaxFactory.Block(
                    SyntaxFactory.IfStatement(
                        SyntaxFactory.BinaryExpression(
                            SyntaxKind.NotEqualsExpression,
                            SyntaxFactory.MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                SyntaxFactory.MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    SyntaxFactory.IdentifierName("setColumnData"),
                                    SyntaxFactory.IdentifierName("Value")),
                                SyntaxFactory.IdentifierName("Count")),
                            SyntaxFactory.IdentifierName("rowCount")),
                        SyntaxFactory.Block(
                            SyntaxFactory.ExpressionStatement(
                                SyntaxFactory.InvocationExpression(
                                    SyntaxFactory.MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        SyntaxFactory.IdentifierName("protocol"),
                                        SyntaxFactory.IdentifierName("Log")))
                                .WithArgumentList(
                                    SyntaxFactory.ArgumentList(
                                        SyntaxFactory.SeparatedList<ArgumentSyntax>(
                                            new SyntaxNodeOrToken[]
                                            {
                                                SyntaxFactory.Argument(
                                                    SyntaxFactory.BinaryExpression(
                                                        SyntaxKind.AddExpression,
                                                        SyntaxFactory.InterpolatedStringExpression(
                                                            SyntaxFactory.Token(SyntaxKind.InterpolatedStringStartToken))
                                                        .WithContents(
                                                            SyntaxFactory.List<InterpolatedStringContentSyntax>(
                                                                new InterpolatedStringContentSyntax[]
                                                                {
                                                                    SyntaxFactory.InterpolatedStringText()
                                                                    .WithTextToken(
                                                                        SyntaxFactory.Token(
                                                                            SyntaxFactory.TriviaList(),
                                                                            SyntaxKind.InterpolatedStringTextToken,
                                                                            "QA",
                                                                            "QA",
                                                                            SyntaxFactory.TriviaList())),
                                                                    SyntaxFactory.Interpolation(
                                                                        SyntaxFactory.MemberAccessExpression(
                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                            SyntaxFactory.IdentifierName("protocol"),
                                                                            SyntaxFactory.IdentifierName("QActionID"))),
                                                                    SyntaxFactory.InterpolatedStringText()
                                                                    .WithTextToken(
                                                                        SyntaxFactory.Token(
                                                                            SyntaxFactory.TriviaList(),
                                                                            SyntaxKind.InterpolatedStringTextToken,
                                                                            "|SetColumns|SetColumns on table '",
                                                                            "|SetColumns|SetColumns on table '",
                                                                            SyntaxFactory.TriviaList())),
                                                                    SyntaxFactory.Interpolation(
                                                                        SyntaxFactory.ElementAccessExpression(
                                                                            SyntaxFactory.InvocationExpression(
                                                                                SyntaxFactory.MemberAccessExpression(
                                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                                    SyntaxFactory.MemberAccessExpression(
                                                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                                                        SyntaxFactory.IdentifierName("setColumnsData"),
                                                                                        SyntaxFactory.IdentifierName("Keys")),
                                                                                    SyntaxFactory.IdentifierName("ToArray"))))
                                                                        .WithArgumentList(
                                                                            SyntaxFactory.BracketedArgumentList(
                                                                                SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                                                                    SyntaxFactory.Argument(
                                                                                        SyntaxFactory.LiteralExpression(
                                                                                            SyntaxKind.NumericLiteralExpression,
                                                                                            SyntaxFactory.Literal(0))))))),
                                                                    SyntaxFactory.InterpolatedStringText()
                                                                    .WithTextToken(
                                                                        SyntaxFactory.Token(
                                                                            SyntaxFactory.TriviaList(),
                                                                            SyntaxKind.InterpolatedStringTextToken,
                                                                            "' failed. ",
                                                                            "' failed. ",
                                                                            SyntaxFactory.TriviaList())),
                                                                })),
                                                        SyntaxFactory.InterpolatedStringExpression(
                                                            SyntaxFactory.Token(SyntaxKind.InterpolatedStringStartToken))
                                                        .WithContents(
                                                            SyntaxFactory.SingletonList<InterpolatedStringContentSyntax>(
                                                                SyntaxFactory.InterpolatedStringText()
                                                                .WithTextToken(
                                                                    SyntaxFactory.Token(
                                                                        SyntaxFactory.TriviaList(),
                                                                        SyntaxKind.InterpolatedStringTextToken,
                                                                        "Not all columns contain the same number of rows.",
                                                                        "Not all columns contain the same number of rows.",
                                                                        SyntaxFactory.TriviaList())))))),
                                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                SyntaxFactory.Argument(
                                                    SyntaxFactory.MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        SyntaxFactory.IdentifierName("LogType"),
                                                        SyntaxFactory.IdentifierName("Error"))),
                                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                SyntaxFactory.Argument(
                                                    SyntaxFactory.MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        SyntaxFactory.IdentifierName("LogLevel"),
                                                        SyntaxFactory.IdentifierName("NoLogging"))),
                                            })))),
                            SyntaxFactory.ReturnStatement())),
                    SyntaxFactory.ExpressionStatement(
                        SyntaxFactory.AssignmentExpression(
                            SyntaxKind.SimpleAssignmentExpression,
                            SyntaxFactory.ElementAccessExpression(
                                SyntaxFactory.IdentifierName("setColumnPids"))
                            .WithArgumentList(
                                SyntaxFactory.BracketedArgumentList(
                                    SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                        SyntaxFactory.Argument(
                                            SyntaxFactory.IdentifierName("columnPos"))))),
                            SyntaxFactory.MemberAccessExpression(
                                SyntaxKind.SimpleMemberAccessExpression,
                                SyntaxFactory.IdentifierName("setColumnData"),
                                SyntaxFactory.IdentifierName("Key")))),
                    SyntaxFactory.ExpressionStatement(
                        SyntaxFactory.AssignmentExpression(
                            SyntaxKind.SimpleAssignmentExpression,
                            SyntaxFactory.ElementAccessExpression(
                                SyntaxFactory.IdentifierName("setColumnValues"))
                            .WithArgumentList(
                                SyntaxFactory.BracketedArgumentList(
                                    SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                        SyntaxFactory.Argument(
                                            SyntaxFactory.IdentifierName("columnPos"))))),
                            SyntaxFactory.InvocationExpression(
                                SyntaxFactory.MemberAccessExpression(
                                    SyntaxKind.SimpleMemberAccessExpression,
                                    SyntaxFactory.MemberAccessExpression(
                                        SyntaxKind.SimpleMemberAccessExpression,
                                        SyntaxFactory.IdentifierName("setColumnData"),
                                        SyntaxFactory.IdentifierName("Value")),
                                    SyntaxFactory.IdentifierName("ToArray"))))),
                    SyntaxFactory.ExpressionStatement(
                        SyntaxFactory.PostfixUnaryExpression(
                            SyntaxKind.PostIncrementExpression,
                            SyntaxFactory.IdentifierName("columnPos"))))),
            SyntaxFactory.LocalDeclarationStatement(
                SyntaxFactory.VariableDeclaration(
                    SyntaxFactory.ArrayType(
                        SyntaxFactory.PredefinedType(
                            SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                    .WithRankSpecifiers(
                        SyntaxFactory.SingletonList<ArrayRankSpecifierSyntax>(
                            SyntaxFactory.ArrayRankSpecifier(
                                SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                    SyntaxFactory.OmittedArraySizeExpression())))))
                .WithVariables(
                    SyntaxFactory.SingletonSeparatedList<VariableDeclaratorSyntax>(
                        SyntaxFactory.VariableDeclarator(
                            SyntaxFactory.Identifier("setColumnOptions"))
                        .WithInitializer(
                            SyntaxFactory.EqualsValueClause(
                                SyntaxFactory.ConditionalExpression(
                                    SyntaxFactory.BinaryExpression(
                                        SyntaxKind.EqualsExpression,
                                        SyntaxFactory.IdentifierName("dateTime"),
                                        SyntaxFactory.LiteralExpression(
                                            SyntaxKind.NullLiteralExpression)),
                                    SyntaxFactory.ArrayCreationExpression(
                                        SyntaxFactory.ArrayType(
                                            SyntaxFactory.PredefinedType(
                                                SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                                        .WithRankSpecifiers(
                                            SyntaxFactory.SingletonList<ArrayRankSpecifierSyntax>(
                                                SyntaxFactory.ArrayRankSpecifier(
                                                    SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                        SyntaxFactory.OmittedArraySizeExpression())))))
                                    .WithInitializer(
                                        SyntaxFactory.InitializerExpression(
                                            SyntaxKind.ArrayInitializerExpression,
                                            SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                SyntaxFactory.LiteralExpression(
                                                    SyntaxKind.TrueLiteralExpression)))),
                                    SyntaxFactory.ArrayCreationExpression(
                                        SyntaxFactory.ArrayType(
                                            SyntaxFactory.PredefinedType(
                                                SyntaxFactory.Token(SyntaxKind.ObjectKeyword)))
                                        .WithRankSpecifiers(
                                            SyntaxFactory.SingletonList<ArrayRankSpecifierSyntax>(
                                                SyntaxFactory.ArrayRankSpecifier(
                                                    SyntaxFactory.SingletonSeparatedList<ExpressionSyntax>(
                                                        SyntaxFactory.OmittedArraySizeExpression())))))
                                    .WithInitializer(
                                        SyntaxFactory.InitializerExpression(
                                            SyntaxKind.ArrayInitializerExpression,
                                            SyntaxFactory.SeparatedList<ExpressionSyntax>(
                                                new SyntaxNodeOrToken[]
                                                {
                                                    SyntaxFactory.LiteralExpression(
                                                        SyntaxKind.TrueLiteralExpression),
                                                    SyntaxFactory.Token(SyntaxKind.CommaToken),
                                                    SyntaxFactory.MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        SyntaxFactory.IdentifierName("dateTime"),
                                                        SyntaxFactory.IdentifierName("Value")),
                                                }))))))))),
            SyntaxFactory.ExpressionStatement(
                SyntaxFactory.AssignmentExpression(
                    SyntaxKind.SimpleAssignmentExpression,
                    SyntaxFactory.ElementAccessExpression(
                        SyntaxFactory.IdentifierName("setColumnPids"))
                    .WithArgumentList(
                        SyntaxFactory.BracketedArgumentList(
                            SyntaxFactory.SingletonSeparatedList<ArgumentSyntax>(
                                SyntaxFactory.Argument(
                                    SyntaxFactory.BinaryExpression(
                                        SyntaxKind.SubtractExpression,
                                        SyntaxFactory.MemberAccessExpression(
                                            SyntaxKind.SimpleMemberAccessExpression,
                                            SyntaxFactory.IdentifierName("setColumnPids"),
                                            SyntaxFactory.IdentifierName("Length")),
                                        SyntaxFactory.LiteralExpression(
                                            SyntaxKind.NumericLiteralExpression,
                                            SyntaxFactory.Literal(1))))))),
                    SyntaxFactory.IdentifierName("setColumnOptions"))),
            SyntaxFactory.ExpressionStatement(
                SyntaxFactory.InvocationExpression(
                    SyntaxFactory.MemberAccessExpression(
                        SyntaxKind.SimpleMemberAccessExpression,
                        SyntaxFactory.IdentifierName("protocol"),
                        SyntaxFactory.IdentifierName("NotifyProtocol")))
                .WithArgumentList(
                    SyntaxFactory.ArgumentList(
                        SyntaxFactory.SeparatedList<ArgumentSyntax>(
                            new SyntaxNodeOrToken[]
                            {
                                SyntaxFactory.Argument(
                                    SyntaxFactory.LiteralExpression(
                                        SyntaxKind.NumericLiteralExpression,
                                        SyntaxFactory.Literal(220))),
                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                SyntaxFactory.Argument(
                                    SyntaxFactory.IdentifierName("setColumnPids")),
                                SyntaxFactory.Token(SyntaxKind.CommaToken),
                                SyntaxFactory.Argument(
                                    SyntaxFactory.IdentifierName("setColumnValues")),
                            }))))));
        }

        /// <summary>
        /// Generating CreateMethods method.
        /// </summary>
        /// <returns>string.</returns>
        public static string CreateMethods()
        {
            var classDeclaration = SyntaxFactory.ClassDeclaration("ProtocolExtension")
                .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword), SyntaxFactory.Token(SyntaxKind.StaticKeyword))
                .AddMembers(ProtocolExtensionGenerator.GenerateDeleteRowMethodObject()).AddMembers(ProtocolExtensionGenerator.GenerateDeleteRowMethodString()).AddMembers(ProtocolExtensionGenerator.GenerateGetCellMethod()).AddMembers(ProtocolExtensionGenerator.GenerateGetColumnMethod())
                .AddMembers(ProtocolExtensionGenerator.GenerateGetColumnsMethod()).AddMembers(ProtocolExtensionGenerator.GenerateSetColumnsMethod()).AddMembers(ProtocolExtensionGenerator.GenerateSetColumnsMethod2()).AddMembers(ProtocolExtensionGenerator.GenerateSetCellMethod())
                .AddMembers(ProtocolExtensionGenerator.GenerateSetParametersMethod());

            var namespaceDeclaration = SyntaxFactory.NamespaceDeclaration(SyntaxFactory.IdentifierName("GeneratedNamespace"))
            .AddMembers(classDeclaration);

            var usings = new List<UsingDirectiveSyntax>
            {
                SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("System")),
                SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("System.Collections.Generic")),
                SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("System.Linq")),
                SyntaxFactory.UsingDirective(SyntaxFactory.ParseName("Skyline.DataMiner.Scripting")),
            };
            var compilationUnit = SyntaxFactory.CompilationUnit()
                .AddUsings(usings.ToArray())
                .AddMembers(namespaceDeclaration);

            return compilationUnit.NormalizeWhitespace().ToFullString();
        }
    }
}
